trigger:
  batch: true
  branches:
    include:
    - master

pr:
- develop

pool:
  vmImage: windows-latest

variables:
- name: 'BuildId'
  value: '$(Build.SourceVersion)'
- name: 'DistDirectory'
  value: '$(System.DefaultWorkingDirectory)/dist'
- name: 'InfraDirectory'
  value: '$(System.DefaultWorkingDirectory)/infra'

- group: meeg-blog-env-vars

- name: 'TargetEnv'
  value: 'preview'
- name: 'TargetEnvName'
  value: 'meeg-blog-preview'
- group: meeg-blog-env-vars-preview

- ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
  - name: 'TargetEnv'
    value: 'prod'
  - name: 'TargetEnvName'
    value: 'meeg-blog-prod'
  - group: meeg-blog-env-vars-prod

- name: 'DeploymentName'
  value: $[format('{0}-{1}', variables['TargetEnv'], variables['Build.BuildNumber'])]

stages:
- stage: 'Infrastructure'
  jobs:
  - job: 'Infrastructure'
    steps:
    - pwsh: md "$(InfraDirectory)"
      displayName: 'Create infra directory'

    - task: AzureCLI@2
      displayName: 'Build ARM template from bicep file'
      inputs:
        azureSubscription: '$(AzureServiceConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        workingDirectory: '$(System.DefaultWorkingDirectory)/.azure/infra'
        inlineScript: |
          az bicep build -f main.bicep --outdir "$(InfraDirectory)"

    - pwsh: |
        . ./Set-Tokens.ps1
        Set-Tokens `
          -InputFile main.parameters.json.template `
          -OutputFile "$(InfraDirectory)/main.parameters.json" `
          -Tokens @{environment="$(TargetEnv)";sharedResourceGroupName="$(AzureSharedResourceGroup)";buildId="$(BuildId)";webAppSkuName="$(WebAppSkuName)";webAppSkuCapacity=$(WebAppSkuCapacity);webAppSlotName="$(WebAppSlotName)"}
      workingDirectory: '$(System.DefaultWorkingDirectory)/.azure/infra'
      displayName: 'Create ARM parameters file'

    - task: AzureCLI@2
      displayName: 'What-If ARM template'
      inputs:
        azureSubscription: '$(AzureServiceConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        workingDirectory: '$(InfraDirectory)'
        inlineScript: |
          az account show
          az deployment group create -w -n "$(DeploymentName)" -g $(AzureResourceGroup) -f main.json -p `@main.parameters.json

    - task: AzureCLI@2
      displayName: 'Run ARM template'
      inputs:
        azureSubscription: '$(AzureServiceConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        workingDirectory: '$(InfraDirectory)'
        inlineScript: |
          az account show
          az deployment group create -n "$(DeploymentName)" -g $(AzureResourceGroup) -f main.json -p `@main.parameters.json

    - task: CopyFiles@2
      displayName: 'Copy infra folder to artifacts'
      inputs:
        SourceFolder: '$(InfraDirectory)'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/infra'
        Contents: '**'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'

- stage: 'Build'
  jobs:
  - job: 'Build'
    steps:
    - task: Cache@2
      displayName: 'Cache node_modules'
      inputs:
        key: node_modules | $(Agent.OS) | package.json | yarn.lock
        path: '$(System.DefaultWorkingDirectory)/node_modules'

    - task: Cache@2
      displayName: 'Cache .next/cache'
      inputs:
        key: next | $(Agent.OS) | package.json | yarn.lock
        path: '$(System.DefaultWorkingDirectory)/.next/cache'

    - pwsh: yarn --frozen-lockfile --network-timeout=100000
      displayName: 'yarn install'

    - task: AzureCLI@2
      displayName: 'Get ARM outputs'
      inputs:
        azureSubscription: '$(AzureServiceConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          $outputs = (az deployment group show -n "$(DeploymentName)" -g $(AzureResourceGroup) --query properties.outputs | ConvertFrom-Json)
          $webAppEnvironment = $outputs.webAppEnvironment.value
          $webAppBaseUrl = $outputs.webAppBaseUrl.value
          $webAppInsightsInstrumentationKey = $outputs.webAppInsightsInstrumentationKey.value
          $cdnEndpointUrl = $outputs.cdnEndpointUrl.value
          Write-Output("##vso[task.setvariable variable=APP_ENV;]$webAppEnvironment")
          Write-Output("##vso[task.setvariable variable=BASE_URL;]$webAppBaseUrl")
          Write-Output("##vso[task.setvariable variable=NEXT_PUBLIC_APPINSIGHTS_INSTRUMENTATIONKEY;]$webAppInsightsInstrumentationKey")
          Write-Output("##vso[task.setvariable variable=NEXT_PUBLIC_CDN_URL;]$cdnEndpointUrl")

    - pwsh: yarn build
      displayName: 'yarn build'

    - pwsh: yarn build:storybook
      displayName: yarn build:storybook
      condition: ne(variables['TargetEnv'], 'prod')

    - task: CopyFiles@2
      displayName: 'Copy build to dist'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: |
          .next/**
          public/**
          next.config.js
          package.json
          server.js
          yarn.lock
        TargetFolder: '$(DistDirectory)'

    - task: CopyFiles@2
      displayName: 'Copy Azure web app files to dist'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: .azure/web-app/**
        flattenFolders: true
        TargetFolder: '$(DistDirectory)'

    - task: ArchiveFiles@2
      displayName: 'Archive dist to build artifacts'
      inputs:
        rootFolderOrFile: '$(DistDirectory)'
        includeRootFolder: false
        archiveFile: '$(Build.ArtifactStagingDirectory)/dist.zip'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish artifacts'

- stage: 'Deploy'
  jobs:
  - deployment: 'Deploy'
    environment: '$(TargetEnvName)'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: ExtractFiles@1
            displayName: 'Extract dist files'
            inputs:
              archiveFilePatterns: '$(Pipeline.Workspace)/**/*.zip'
              destinationFolder: '$(DistDirectory)'

          - task: AzureCLI@2
            displayName: 'Get ARM outputs'
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              scriptType: pscore
              scriptLocation: inlineScript
              inlineScript: |
                $outputs = (az deployment group show -n "$(DeploymentName)" -g $(AzureResourceGroup) --query properties.outputs | ConvertFrom-Json)
                $webAppName = $outputs.webAppName.value
                Write-Output("##vso[task.setvariable variable=WebAppName;]$webAppName")

          - task: AzureWebApp@1
            displayName: 'Deploy dist to web app'
            inputs:
              azureSubscription: '$(AzureServiceConnection)'
              appName: '$(WebAppName)'
              appType: 'webApp'
              deployToSlotOrASE: true
              resourceGroupName: '$(AzureSharedResourceGroup)'
              slotName: '$(WebAppSlotName)'
              package: '$(DistDirectory)'
              deploymentMethod: 'zipDeploy'
